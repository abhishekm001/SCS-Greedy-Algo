/**
 * Find Shortest Common Substring using Greedy Alogrithm
 */
#include<bits/stdc++.h>
#include<cstring>
#include<iostream>

using namespace std;

int calculateScs(char* x, char* y, int m, int n) {

    if (!m) return n;
    if (!n) return m;

    int i, j = 0, count = 0;

    for (i = 0; i < m; i++) {

        if (x[i] == y[j]) {
            count += 1;
            j++;
        } else if (count > 0) {
            count = 0;
            j = 0;
            i--;
        } else {
            j = 0;
        }
    }
    return count;
}

int main() {

    int no, i, j, head, tail, max = -1, scsLen;
    string *strArray, subStr, scs;
    int **common;
    string blankSpace;
    char blank = ' ';
    int bsCount;

    printf("Enter number of strings: ");
    scanf("%d", &no);
    
    // Stores user entered strings
    strArray = new string[no];
    // Maintians matrix for common character count between two strings
    common = new int*[no];

    //printf("Enter Strings:\n");
    for (i = 0; i < no; i++) {
        cin >> strArray[i];
        common[i] = new int[no];
    }
    
    cout<< "Output:\n";
    // Initialize array
    for (i = 0; i < no; i++) {
        for (j = 0; j < no; j++) {
            common[i][j] = -1;
        }
    }

    // Evaluates Common character count for all pair of strings
    for (i = 0; i < no; i++) {
        if (!strArray[i].empty())
            for (j = 0; j < no; j++) {

                if (i == j || strArray[j].empty()) {
                    common[i][j] = -1;
                } else {
                    
                    // Checks for duplicate string
                    if(strArray[i].compare(strArray[j]) == 0){
                        cout << "\nDuplicate String found:" << strArray[i];
                        return 0;
                    }
                    
                    char X[strArray[i].size() + 1];
                    strcpy(X, strArray[i].c_str());
                    char Y[strArray[j].size() + 1];
                    strcpy(Y, strArray[j].c_str());
                    
                    // Calculates Common String
                    int scsLen = calculateScs(X, Y, strlen(X), strlen(Y));
                    common[i][j] = scsLen;

                    // Compare logic
                    if (scsLen > max) {
                        max = scsLen;
                        head = i;
                        tail = j;
                    }

                }
            }
    }

    // Create SCS seq
    subStr.clear();
    scs.clear();
    subStr = strArray[tail].substr(max);
    scs = strArray[head] + subStr;
    bsCount = strArray[head].size() - max;

    blankSpace.append(bsCount, blank);

    cout << strArray[head] << "\n";
    cout << blankSpace << strArray[tail] << "\n";

    strArray[head].clear();
    strArray[tail].clear();
    blankSpace.clear();

    for (i = 0; i < (no - 2); i++) {
        max = -1;
        for (j = 0; j < no; j++) {

            if (!strArray[j].empty()) {

                char X[scs.size() + 1];
                strcpy(X, scs.c_str());
                char Y[strArray[j].size() + 1];
                strcpy(Y, strArray[j].c_str());

                scsLen = calculateScs(X, Y, strlen(X), strlen(Y));

                // Compare logic
                if (scsLen > max) {
                    max = scsLen;
                    tail = j;
                }
            }
        }
        // Create SCS seq
        subStr.clear();
        subStr = strArray[tail].substr(max);
        bsCount = scs.size() - max;
        scs = scs + subStr;

        blankSpace.append(bsCount, blank);

        cout << blankSpace << strArray[tail] << "\n";

        strArray[tail].clear();
        blankSpace.clear();
    }
    cout << "\n" << "Length of SCS:" << scs.size();
    return 0;
}
